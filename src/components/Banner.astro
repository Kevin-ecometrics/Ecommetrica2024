---
import { getLangFromUrl, useTranslations } from "src/i18n/utils";

const URL = Astro.url;
const lang = getLangFromUrl(URL);
const t = useTranslations(lang);
---

<div
  class="w-full min-h-screen relative overflow-hidden bg-gradient-to-l from-[#BD155C] to-[#1E171E]"
>
  <!-- Partículas interactivas mejoradas -->
  <div id="particles" class="absolute inset-0 z-10 opacity-40"></div>

  <!-- Contenido principal -->
  <div
    class="relative z-20 min-h-screen flex items-center justify-center px-4 py-20"
  >
    <div
      class="max-w-6xl mx-auto text-center backdrop-blur-xl bg-black/20 rounded-[2rem] p-8 md:p-16 border border-[#FF98BF]/20 shadow-2xl hover:shadow-3xl transition-shadow duration-500"
    >
      <div class="space-y-8">
        <h1
          class="text-4xl md:text-7xl font-bold text-white mb-4 animate-fade-in"
        >
          <span
            class="bg-clip-text text-transparent bg-gradient-to-r from-[#ffffff] to-[#e4e4e4] animate-text-glow mb-12"
          >
            {t("banner.title1")}
          </span>

          <span
            class="text-xl md:text-xl font-medium text-[#FFD9E5] mt-4 block"
          >
            {t("banner.title2")}
          </span>
        </h1>

        <p
          class="text-lg md:text-2xl text-[#F0F0F0] max-w-5xl mx-auto leading-relaxed"
        >
          <span class="block mt-4">
            <span
              class="inline-block mx-2 px-4 py-2 bg-[#FF6090]/10 rounded-full border border-[#FF98BF]/20 text-[#FFB3D1]"
            >
              {t("banner.title3")}
            </span>
            <span
              class="inline-block mx-2 px-4 py-2 bg-[#FF6090]/10 rounded-full border border-[#FF98BF]/20 text-[#FFB3D1]"
            >
              {t("banner.title4")}
            </span>
          </span>

          <div class="mt-12">
            <a
              href="https://e-commetrics.com/"
              target="_blank"
              class="group inline-flex items-center space-x-4 bg-white text-black px-12 py-5 rounded-full text-lg md:text-xl font-semibold transition-all duration-300 hover:scale-105 shadow-xl hover:shadow-2xl"
            >
              <span> {t("banner.title5")} </span>
              <svg
                class="w-6 h-6 transition-transform group-hover:translate-x-2"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M17 8l4 4m0 0l-4 4m4-4H3"></path>
              </svg>
            </a>
          </div>
        </p>
      </div>
    </div>
  </div>

  <style>
    @keyframes fade-in {
      from {
        opacity: 0;
        transform: translateY(20px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    @keyframes text-glow {
      0% {
        text-shadow: 0 0 10px rgba(255, 152, 191, 0.3);
      }
      50% {
        text-shadow: 0 0 20px rgba(255, 152, 191, 0.6);
      }
      100% {
        text-shadow: 0 0 10px rgba(255, 152, 191, 0.3);
      }
    }

    .animate-fade-in {
      animation: fade-in 1s ease-out forwards;
    }

    .animate-text-glow {
      animation: text-glow 3s ease-in-out infinite;
    }
  </style>

  <script>
    document.addEventListener("DOMContentLoaded", () => {
      const particlesContainer = document.getElementById(
        "particles"
      ) as HTMLElement;

      const createParticle = (): HTMLElement => {
        const particle = document.createElement("div");
        particle.className =
          "absolute w-2.5 h-2.5 bg-[#FF98BF] rounded-full opacity-50 animate-float";
        particle.style.cssText = `
                left: ${Math.random() * 100}%;
                top: ${Math.random() * 100}%;
                animation-duration: ${8 + Math.random() * 4}s;
                animation-delay: ${Math.random() * 2}s;
            `;
        return particle;
      };

      // Crear partículas
      Array.from({ length: 80 }).forEach(() => {
        particlesContainer.appendChild(createParticle());
      });

      // Manejo de interacción
      let raf: number;
      document.addEventListener("mousemove", (e: MouseEvent) => {
        cancelAnimationFrame(raf);
        raf = requestAnimationFrame(() =>
          updateParticles(e.clientX, e.clientY)
        );
      });

      const updateParticles = (x: number, y: number): void => {
        const particles = document.getElementsByClassName("animate-float");
        Array.from(particles).forEach((particle: Element) => {
          const htmlParticle = particle as HTMLElement;
          const rect = htmlParticle.getBoundingClientRect();
          const dx = x - (rect.left + rect.width / 2);
          const dy = y - (rect.top + rect.height / 2);
          const distance = Math.sqrt(dx * dx + dy * dy);

          if (distance < 150) {
            const angle = Math.atan2(dy, dx);
            const force = (150 - distance) * 0.15;
            htmlParticle.style.transform = `translate(
                        ${Math.cos(angle) * force}px,
                        ${Math.sin(angle) * force}px
                    )`;
          }
        });
      };
    });
  </script>
</div>
