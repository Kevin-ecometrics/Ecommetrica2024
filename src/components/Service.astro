---
import { getLangFromUrl, useTranslations } from "src/i18n/utils";
import ServiceSection from "@components/ServiceSection";
const URL = Astro.url;
const lang = getLangFromUrl(URL);
const t = useTranslations(lang);
let services = [
  {
    id: 0,
    image: "/banner1.webp",
    name: t("service.video"),
    description: t("service.videodesc"),
    descriptionModal: t("service.videodesc2"),
  },
  {
    id: 1,
    image: "/banner2.webp",
    name: t("service.brand"),
    description: t("service.branddesc"),
    descriptionModal: t("service.branddesc2"),
  },
  {
    id: 2,
    image: "/banner3.webp",
    name: t("service.writing"),
    description: t("service.writingdesc"),
    descriptionModal: t("service.writingdesc2"),
  },
  {
    id: 3,
    image: "/banner4.webp",
    name: t("service.web"),
    description: t("service.webdesc"),
    descriptionModal: t("service.webdesc2"),
  },
  {
    id: 4,
    image: "/banner5.webp",
    name: t("service.webapp"),
    description: t("service.webappdesc"),
    descriptionModal: t("service.webappdesc2"),
  },
  {
    id: 5,
    image: "/banner6.webp",
    name: t("service.desing"),
    description: t("service.desingdesc"),
    descriptionModal: t("service.desingdesc2"),
  },
  {
    id: 6,
    image: "/banner7.webp",
    name: t("service.ecommerce"),
    description: t("service.ecommercedesc"),
    descriptionModal: t("service.ecommercedesc2"),
  },
  {
    id: 7,
    image: "/banner8.webp",
    name: t("service.planning"),
    description: t("service.planningdesc"),
    descriptionModal: t("service.planningdesc2"),
  },
];
---

<main>
  <ServiceSection services={services} URL={URL} client:visible />
</main>

<script>
  document.querySelectorAll(".service-card").forEach((card) => {
    card.addEventListener("mousemove", (e: MouseEvent) => {
      const rect = (card as HTMLElement).getBoundingClientRect();
      const x = e.clientX - rect.left;
      const y = e.clientY - rect.top;
      const centerX = rect.width / 2;
      const centerY = rect.height / 2;
      const rotateX = (y - centerY) / 10;
      const rotateY = (x - centerX) / 10;
      (card as HTMLElement).style.transform =
        `rotateX(${rotateX}deg) rotateY(${rotateY}deg)`;
    });

    card.addEventListener("mouseleave", () => {
      (card as HTMLElement).style.transform = "rotateX(0) rotateY(0)";
    });
  });
</script>

<style>
  .service-card {
    perspective: 1000px;
    transition: transform 0.3s ease;
  }

  .service-card:hover {
    transform: rotateY(15deg) rotateX(15deg) translateZ(20px);
  }

  @keyframes slideX {
    0% {
      transform: translateX(-50%) translateY(-50px);
    }
    50% {
      transform: translateX(25%) translateY(-50px);
    }
    100% {
      transform: translateX(-50%) translateY(-50px);
    }
  }

  @keyframes slideY {
    0% {
      transform: translateY(0) translateX(-100px);
    }
    50% {
      transform: translateY(100%) translateX(-100px);
    }
    100% {
      transform: translateY(0) translateX(-100px);
    }
  }

  .animate-div {
    animation: slideX 5s infinite;
  }

  .animate-div-2 {
    animation: slideY 5s infinite;
  }
</style>
