---
import Layout from "@layouts/Layout.astro";
import VCF from "@components/team/VCF";
import teamMembers from "@components/team/TeamMembersEN";
export function getStaticPaths() {
  return [
    { params: { id: "Juan" } },
    { params: { id: "Karen" } },
    { params: { id: "Yaz" } },
    { params: { id: "Kevin" } },
    { params: { id: "Carlos" } },
    { params: { id: "Jesus" } },
    { params: { id: "Maria" } },
  ];
}
const { id } = Astro.params;
const URL = Astro.url;

const member = teamMembers.find((member) => {
  const memberMap = {
    Kevin: 1,
    Karen: 2,
    Yaz: 3,
    Juan: 4,
    Carlos: 5,
    Jesus: 6,
    Maria: 7,
  };
  return member.id === memberMap[id];
});
---

<Layout title={`Team - ${id}`}>
  <section
    class="container mx-auto p-4 grid grid-cols-1 md:grid-cols-3 px-8 gap-8"
  >
    <div class="md:col-span-3 mb-4 hidden md:block">
      <a
        href="javascript:history.back()"
        class="flex items-center text-[#861453] hover:text-[#861453]"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          class="h-6 w-6 mr-2"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M15 19l-7-7 7-7"></path>
        </svg>
        Back
      </a>
    </div>
    <div
      class="col-span-1 flex flex-col items-center space-y-4 border-2 border-[#861453] p-4 rounded-lg shadow-md"
    >
      <img
        src={member.image}
        transition:name={member.transition}
        class="h-80 w-80 object-cover rounded-full shadow-lg border-2 border-[#861453]"
      />
      <h1 class="text-3xl font-bold text-center text-[#861453]">
        {member.fullName}
      </h1>
      <div class="text-lg">
        <strong>Position:</strong>
        <span class="text-[#861453] font-semibold">{member.role}</span>
      </div>
      <div class="text-lg">
        <strong>Skills:</strong>
        <span class="text-[#861453] font-semibold">{member.skills}</span>
      </div>
      <div class="text-lg">
        <strong>Experience:</strong>
        <span class="text-[#861453] font-semibold">{member.experience}</span>
      </div>
      <div class="text-lg">
        <strong>Education:</strong>
        <span class="text-[#861453] font-semibold whitespace-pre-wrap"
          >{member.education}</span
        >
      </div>
      <div class="text-lg">
        <strong>Contact:</strong>
        <span class="text-[#861453] font-semibold">{member.contact}</span>
      </div>
    </div>
    <div class="col-span-2 space-y-8">
      {
        member.extendedDescription && (
          <div>
            <h2 class="font-bold text-lg mb-2">About {member.fullName}</h2>
            <p class="text-justify">{member.extendedDescription}</p>
          </div>
        )
      }

      <div>
        <h2 class="font-bold text-lg mb-2">Detailed Skills</h2>
        <pre class="whitespace-pre-wrap" set:html={member.detailedSkills} />
      </div>

      <div>
        <h2 class="font-bold text-lg mb-2">
          What does working with {member.name} mean?
        </h2>
        <p class="text-justify">{member.workEthic}</p>
      </div>

      {
        member.additionalDetails?.funFacts && (
          <div>
            <h2 class="font-bold text-lg mb-2">Fun Facts</h2>
            <ul class="list-disc list-inside">
              {member.additionalDetails.funFacts.map((fact) => (
                <li class="text-justify">{fact}</li>
              ))}
            </ul>
          </div>
        )
      }

      {/* You can add more sections here if needed */}
    </div>
    <!-- <VCF member={member} client:visible URL={URL} /> -->
  </section>
</Layout>
